/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.UserCourse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-06T03:38:36.462Z[GMT]")
@Api(value = "userCourse", description = "the userCourse API")
public interface UserCourseApi {

    @ApiOperation(value = "Adds a userCourse", nickname = "addUserCourse", notes = "Add a userCourse to the dataBase", tags={ "userCourse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "userCourse created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing userCourse already exists") })
    @RequestMapping(value = "/userCourse",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addUserCourse(@ApiParam(value = "userCourse to add"  )  @Valid @RequestBody UserCourse body);


    @ApiOperation(value = "Delete a userCourse", nickname = "deleteUserCourse", notes = "Delete a userCourse to the dataBase", response = String.class, tags={ "userCourse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid userCourseId supplied"),
        @ApiResponse(code = 404, message = "userCourse not found") })
    @RequestMapping(value = "/userCourse/{userCourseId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteUserCourse(@ApiParam(value = "The id that needs to be deleted",required=true) @PathVariable("userCourseId") String userCourseId);


    @ApiOperation(value = "get all userCourse", nickname = "getAllUserCourse", notes = "Get userCourse from the dataBase ", response = UserCourse.class, responseContainer = "List", tags={ "userCourse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = UserCourse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters supplied"),
        @ApiResponse(code = 404, message = "UserCourse not found") })
    @RequestMapping(value = "/userCourse",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserCourse>> getAllUserCourse(@ApiParam(value = "find all the userCourse of a user with the id of the user to search") @Valid @RequestParam(value = "userId", required = false) String userId,@ApiParam(value = "find all the userCourse of a course with the id of the course to search") @Valid @RequestParam(value = "courseId", required = false) String courseId);


    @ApiOperation(value = "get a userCourse", nickname = "getUserCourseId", notes = "Get a userCourse from the dataBase with its id ", response = UserCourse.class, responseContainer = "List", tags={ "userCourse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = UserCourse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid userCourseId supplied"),
        @ApiResponse(code = 404, message = "UserCourse not found") })
    @RequestMapping(value = "/userCourse/{userCourseId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserCourse>> getUserCourseId(@ApiParam(value = "Id of the userCourse to search",required=true) @PathVariable("userCourseId") String userCourseId);


    @ApiOperation(value = "Update an userCourse", nickname = "updateUserCourse", notes = "Update a userCourse of the dataBase.", response = UserCourse.class, tags={ "userCourse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserCourse.class),
        @ApiResponse(code = 400, message = "Invalid userCourse supplied"),
        @ApiResponse(code = 404, message = "userCourse not found") })
    @RequestMapping(value = "/userCourse",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<UserCourse> updateUserCourse(@ApiParam(value = "Updated userCourse object" ,required=true )  @Valid @RequestBody UserCourse body);

}
