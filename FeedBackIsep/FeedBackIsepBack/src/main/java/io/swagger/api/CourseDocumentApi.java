/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CourseDocument;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-06T03:38:36.462Z[GMT]")
@Api(value = "courseDocument", description = "the courseDocument API")
public interface CourseDocumentApi {

    @ApiOperation(value = "Adds a courseDocument", nickname = "addCourseDocument", notes = "Add a courseDocument to the dataBase", tags={ "courseDocument", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "courseDocument created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing courseDocument already exists") })
    @RequestMapping(value = "/courseDocument",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addCourseDocument(@ApiParam(value = "courseDocument to add"  )  @Valid @RequestBody CourseDocument body);


    @ApiOperation(value = "Delete a courseDocument", nickname = "deleteCourseDocument", notes = "Delete a courseDocument to the dataBase", response = String.class, tags={ "courseDocument", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid courseDocumentId supplied"),
        @ApiResponse(code = 404, message = "courseDocument not found") })
    @RequestMapping(value = "/courseDocument/{courseDocumentId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteCourseDocument(@ApiParam(value = "The id that needs to be deleted",required=true) @PathVariable("courseDocumentId") String courseDocumentId);


    @ApiOperation(value = "get all courseDocument", nickname = "getAllCourseDocument", notes = "Get courseDocument from the dataBase ", response = CourseDocument.class, responseContainer = "List", tags={ "courseDocument", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = CourseDocument.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters supplied"),
        @ApiResponse(code = 404, message = "CourseDocument not found") })
    @RequestMapping(value = "/courseDocument",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CourseDocument>> getAllCourseDocument(@ApiParam(value = "find all the courseDocument of a user who post the document with the id of the user to search") @Valid @RequestParam(value = "userPostId", required = false) String userPostId,@ApiParam(value = "find all the courseDocument of a course with the id of the course to search") @Valid @RequestParam(value = "courseId", required = false) String courseId);


    @ApiOperation(value = "get a courseDocument", nickname = "getCourseDocumentId", notes = "Get a courseDocument from the dataBase with its id ", response = CourseDocument.class, responseContainer = "List", tags={ "courseDocument", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = CourseDocument.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid courseDocumentId supplied"),
        @ApiResponse(code = 404, message = "CourseDocument not found") })
    @RequestMapping(value = "/courseDocument/{courseDocumentId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CourseDocument>> getCourseDocumentId(@ApiParam(value = "Id of the courseDocument to search",required=true) @PathVariable("courseDocumentId") String courseDocumentId);


    @ApiOperation(value = "Update an courseDocument", nickname = "updateCourseDocument", notes = "Update a courseDocument of the dataBase.", response = CourseDocument.class, tags={ "courseDocument", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CourseDocument.class),
        @ApiResponse(code = 400, message = "Invalid courseDocument supplied"),
        @ApiResponse(code = 404, message = "CourseDocument not found") })
    @RequestMapping(value = "/courseDocument",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CourseDocument> updateCourseDocument(@ApiParam(value = "Updated courseDocument object" ,required=true )  @Valid @RequestBody CourseDocument body);

}
