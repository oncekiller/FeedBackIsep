/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Conversation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-01T00:52:54.999Z[GMT]")
@Api(value = "conversation", description = "the conversation API")
public interface ConversationApi {

    @ApiOperation(value = "Adds a conversation", nickname = "addConversation", notes = "Add a conversation to the dataBase", tags={ "conversation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "conversation created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing conversation already exists") })
    @RequestMapping(value = "/conversation",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addConversation(@ApiParam(value = "conversation to add"  )  @Valid @RequestBody Conversation body);


    @ApiOperation(value = "Delete a conversation", nickname = "deleteConversation", notes = "Delete a conversation to the dataBase", response = String.class, tags={ "conversation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid conversationId supplied"),
        @ApiResponse(code = 404, message = "conversation not found") })
    @RequestMapping(value = "/conversation/{conversationId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteConversation(@ApiParam(value = "The id that needs to be deleted",required=true) @PathVariable("conversationId") String conversationId);


    @ApiOperation(value = "get all conversations", nickname = "getAllConversations", notes = "Get conversations from the dataBase ", response = Conversation.class, responseContainer = "List", tags={ "conversation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Conversation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters supplied"),
        @ApiResponse(code = 404, message = "Conversation not found") })
    @RequestMapping(value = "/conversation",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Conversation>> getAllConversations(@ApiParam(value = "find all the conversations of a user with the id of the user to search") @Valid @RequestParam(value = "userId", required = false) String userId);


    @ApiOperation(value = "get a conversation", nickname = "getConversationId", notes = "Get a conversation from the dataBase with its id ", response = Conversation.class, responseContainer = "List", tags={ "conversation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Conversation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid conversationId supplied"),
        @ApiResponse(code = 404, message = "Conversation not found") })
    @RequestMapping(value = "/conversation/{conversationId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Conversation>> getConversationId(@ApiParam(value = "Id of the conversation to search",required=true) @PathVariable("conversationId") String conversationId);


    @ApiOperation(value = "Update an conversation", nickname = "updateConversation", notes = "Update a conversation of the dataBase.", response = Conversation.class, tags={ "conversation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Conversation.class),
        @ApiResponse(code = 400, message = "Invalid conversation supplied"),
        @ApiResponse(code = 404, message = "Conversation not found") })
    @RequestMapping(value = "/conversation",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Conversation> updateConversation(@ApiParam(value = "Updated conversation object" ,required=true )  @Valid @RequestBody Conversation body);

}
